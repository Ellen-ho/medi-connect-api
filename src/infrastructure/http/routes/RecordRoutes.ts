import { Router } from 'express'
import { asyncHandler } from '../middlewares/AsyncHandler'
import { IRecordController } from '../controllers/RecordController'

import { authenticated } from '../middlewares/Auth'
import { validator } from '../middlewares/Validator'
import {
  creatBloodPressureRecordSchema,
  creatBloodSugarRecordSchema,
  creatExerciseRecordSchema,
  creatFoodRecordSchema,
  creatGlycatedHemoglobinRecordSchema,
  creatSleepRecordSchema,
  creatWeightRecordSchema,
  editBloodPressureRecordSchema,
  editBloodSugarRecordSchema,
  editExerciseRecordSchema,
  editFoodRecordSchema,
  editGlycatedHemoglobinRecordSchema,
  editSleepRecordSchema,
  editWeightRecordSchema,
  getBloodPressureRecordsSchema,
  getBloodSugarRecordsSchema,
  getExerciseRecordsSchema,
  getFoodRecordsSchema,
  getGlycatedHemoglobinRecordsSchema,
  getGoalDurationRecordsSchema,
  getSingleBloodPressureRecordSchema,
  getSingleBloodSugarRecordSchema,
  getSingleExerciseRecordSchema,
  getSingleFoodRecordSchema,
  getSingleGlycatedHemoglobinRecordSchema,
  getSingleSleepRecordSchema,
  getSingleWeightRecordSchema,
  getSleepRecordsSchema,
  getWeightRecordsSchema,
} from '../../../application/record/RecordValidator'
export class RecordRoutes {
  private readonly routes: Router
  constructor(private readonly recordController: IRecordController) {
    this.routes = Router()
    this.routes
      .post(
        '/weight',
        authenticated,
        validator(creatWeightRecordSchema),
        asyncHandler(this.recordController.createWeightRecord)
      )
      .patch(
        '/weight/:id',
        authenticated,
        validator(editWeightRecordSchema),
        asyncHandler(this.recordController.editWeightRecord)
      )
      .post(
        '/blood-pressure',
        authenticated,
        validator(creatBloodPressureRecordSchema),
        asyncHandler(this.recordController.createBloodPressureRecord)
      )
      .patch(
        '/blood-pressure/:id',
        authenticated,
        validator(editBloodPressureRecordSchema),
        asyncHandler(this.recordController.editBloodPressureRecord)
      )
      .post(
        '/blood-sugar',
        authenticated,
        validator(creatBloodSugarRecordSchema),
        asyncHandler(this.recordController.createBloodSugarRecord)
      )
      .patch(
        '/blood-sugar/:id',
        authenticated,
        validator(editBloodSugarRecordSchema),
        asyncHandler(this.recordController.editBloodSugarRecord)
      )

      .post(
        '/exercise',
        authenticated,
        validator(creatExerciseRecordSchema),
        asyncHandler(this.recordController.createExerciseRecord)
      )
      .patch(
        '/exercise/:id',
        authenticated,
        validator(editExerciseRecordSchema),
        asyncHandler(this.recordController.editExerciseRecord)
      )
      .post(
        '/food',
        authenticated,
        validator(creatFoodRecordSchema),
        asyncHandler(this.recordController.createFoodRecord)
      )
      .patch(
        '/food/:id',
        authenticated,
        validator(editFoodRecordSchema),
        asyncHandler(this.recordController.editFoodRecord)
      )
      .post(
        '/glycated-hemoglobin',
        authenticated,
        validator(creatGlycatedHemoglobinRecordSchema),
        asyncHandler(this.recordController.createGlycatedHemoglobinRecord)
      )
      .patch(
        '/glycated-hemoglobin/:id',
        authenticated,
        validator(editGlycatedHemoglobinRecordSchema),
        asyncHandler(this.recordController.editGlycatedHemoglobinRecord)
      )
      .post(
        '/sleep',
        authenticated,
        validator(creatSleepRecordSchema),
        asyncHandler(this.recordController.createSleepRecord)
      )
      .patch(
        '/sleep/:id',
        authenticated,
        validator(editSleepRecordSchema),
        asyncHandler(this.recordController.editSleepRecord)
      )
      .get(
        '/goal/:id',
        authenticated,
        validator(getGoalDurationRecordsSchema),
        asyncHandler(this.recordController.getGoalDurationRecords)
      )
      .get(
        '/exercise/:id',
        authenticated,
        validator(getSingleExerciseRecordSchema),
        asyncHandler(this.recordController.getSingleExerciseRecord)
      )
      .get(
        '/blood-pressure/:id',
        authenticated,
        validator(getSingleBloodPressureRecordSchema),
        asyncHandler(this.recordController.getSingleBloodPressureRecord)
      )
      .get(
        '/blood-sugar/:id',
        authenticated,
        validator(getSingleBloodSugarRecordSchema),
        asyncHandler(this.recordController.getSingleBloodSugarRecord)
      )
      .get(
        '/food/:id',
        authenticated,
        validator(getSingleFoodRecordSchema),
        asyncHandler(this.recordController.getSingleFoodRecord)
      )
      .get(
        '/glycated-hemoglobin/:id',
        authenticated,
        validator(getSingleGlycatedHemoglobinRecordSchema),
        asyncHandler(this.recordController.getSingleGlycatedHemoglobinRecord)
      )
      .get(
        '/sleep/:id',
        authenticated,
        validator(getSingleSleepRecordSchema),
        asyncHandler(this.recordController.getSingleSleepRecord)
      )
      .get(
        '/weight/:id',
        authenticated,
        validator(getSingleWeightRecordSchema),
        asyncHandler(this.recordController.getSingleWeightRecord)
      )
      .get(
        '/exercise',
        authenticated,
        validator(getExerciseRecordsSchema),
        asyncHandler(this.recordController.getExerciseRecords)
      )
      .get(
        '/blood-pressure',
        authenticated,
        validator(getBloodPressureRecordsSchema),
        asyncHandler(this.recordController.getBloodPressureRecords)
      )
      .get(
        '/blood-sugar',
        authenticated,
        validator(getBloodSugarRecordsSchema),
        asyncHandler(this.recordController.getBloodSugarRecords)
      )
      .get(
        '/food',
        authenticated,
        validator(getFoodRecordsSchema),
        asyncHandler(this.recordController.getFoodRecords)
      )
      .get(
        '/glycated-hemoglobin',
        authenticated,
        validator(getGlycatedHemoglobinRecordsSchema),
        asyncHandler(this.recordController.getGlycatedHemoglobinRecords)
      )
      .get(
        '/sleep',
        authenticated,
        validator(getSleepRecordsSchema),
        asyncHandler(this.recordController.getSleepRecords)
      )
      .get(
        '/weight',
        authenticated,
        validator(getWeightRecordsSchema),
        asyncHandler(this.recordController.getWeightRecords)
      )
  }

  public createRouter(): Router {
    return this.routes
  }
}
